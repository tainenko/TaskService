openapi: 3.0.0
info:
  contact:
    name: "Tony Ko"
    url: "https://github.com/tainenko/TaskService"
  title: "Task Service"
  description: OpenAPI.
  version: "1.0.0"
servers:
  - url: http://localhost:8080
    description: local
paths:
  /tasks:
    get:
      summary: Get task list
      description: Get paginated list of tasks with optional filters
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
        - in: query
          name: pageSize
          schema:
            type: integer
          description: Number of items per page
        - in: query
          name: sort
          schema:
            type: string
          description: Field to sort by
        - in: query
          name: order
          schema:
            type: string
            enum: [ asc, desc ]
          description: Sort order
        - in: query
          name: name
          schema:
            type: string
          description: Filter by task name
        - in: query
          name: status
          schema:
            type: integer
            enum: [ 0, 1 ]
          description: Filter by task status
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  pagination:
                    type: object
                    properties:
                      totalRecords:
                        type: integer
                        description: Total number of records
                      currentPage:
                        type: integer
                        description: Current page number
                      totalPages:
                        type: integer
                        description: Total number of pages
                      nextPage:
                        type: integer
                        description: Next page number
                      prevPage:
                        type: integer
                        description: Previous page number
    post:
      summary: Create new task
      description: Create a new task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        '201':
          description: Task created successfully

  /tasks/{id}:
    put:
      summary: Update task
      description: Update an existing task by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Task ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        '200':
          description: Task updated successfully
        '404':
          description: Task not found

    delete:
      summary: Delete task
      description: Delete an existing task by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Task ID
      responses:
        '200':
          description: Task deleted successfully
        '404':
          description: Task not found

components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          description: Task ID
        name:
          type: string
          description: Task name
        status:
          type: integer
          enum: [ 0, 1 ]
          description: 0 represents an incomplete task, while 1 represents a completed task
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TaskInput:
      type: object
      required:
        - name
        - status
      properties:
        name:
          type: string
          description: Task name
        status:
          type: integer
          enum: [ 0, 1 ]
          description: 0 represents an incomplete task, while 1 represents a completed task